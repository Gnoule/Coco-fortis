import json
from ConstraintFinder import *
from ConstraintResolver import *
from ResolverFromCP import *
from datetime import datetime
import copy
import os
os.environ["PYCSP3_SOLVERS"] = "ace=java -jar C:/Users/mathe/OneDrive/Bureau/LIRMM/Coco-fortis/venv313/Lib/site-packages/pycsp3/solvers/ace/ACE-2.5.jar"



example = ['39a8645d','28bf18c6','27a28665','25d487eb','08ed6ac7','7f4411dc']

#3de23699 3906de3d
data = None

project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

json_path = os.path.join(project_root, "training", "3de23699.json")

with open(json_path) as json_file:
    data = json.load(json_file)


training_examples = data['train']


def Finder(examples, evaluation):
    constraints_brut = []
    startTime = datetime.now()

    # constraints_brut.append(FindConstraintFromExample(examples[4]['input'], examples[4]['output']))
    # print()
    for example in examples:
        constraints_brut.append(FindConstraintFromExample(example['input'], example['output']))
    final_constraint = FilterConstraint(constraints_brut)
    print("final_constraint = ", final_constraint)

    input_graph = Graph(copy.deepcopy(evaluation[0]['input']))

    result = Resolver(final_constraint, evaluation[0]['input'])

    graph = CreateResult(result, evaluation[0]['input'])
    print("FINDING CONSTRAINTS = ", datetime.now() - startTime)
    if graph != None:
        input_graph.ShowGrid()
        graph.ShowGrid()



# for testing one task (needed one more example)

test_3de23699 = {"train": [{"input": [[0, 0, 0, 0, 0, 0, 0], 
                      [0, 4, 0, 0, 0, 4, 0], 
                      [0, 0, 0, 2, 0, 0, 0], 
                      [0, 0, 2, 2, 2, 0, 0], 
                      [0, 0, 0, 2, 2, 0, 0], 
                      [0, 4, 0, 0, 0, 4, 0], 
                      [0, 0, 0, 0, 0, 0, 0]], 
                      "output": 
                      [[0, 4, 0], [4, 4, 4], [0, 4, 4]]
            }, 
            {"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 3, 0, 0, 0, 0, 0, 3, 0], 
                       [0, 0, 0, 2, 2, 0, 0, 0, 0], 
                       [0, 0, 0, 2, 2, 0, 2, 0, 0], 
                       [0, 0, 2, 0, 0, 2, 0, 0, 0], 
                       [0, 3, 0, 0, 0, 0, 0, 3, 0], 
                       [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 0, 0, 0, 0]], 
            "output": [[0, 3, 3, 0, 0], [0, 3, 3, 0, 3], [3, 0, 0, 3, 0]]}, 
            {"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], 
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 
                       "output": [[0, 6, 0, 0], [0, 6, 0, 0], [6, 6, 6, 0], [0, 6, 6, 0]]}, 
                       {"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                  [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], 
                                  [0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                  [0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], 
                                  [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], 
                                  [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], 
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 
                        "output": [[0, 0, 0, 8, 8, 0, 0, 0], 
                                   [0, 0, 8, 8, 0, 0, 0, 0], 
                                   [0, 0, 0, 0, 0, 0, 8, 0], 
                                   [0, 0, 0, 0, 8, 0, 8, 0]]},
                        {"input": [[0, 0, 0, 0, 0, 0, 0], 
                        [0, 4, 0, 0, 0, 4, 0], 
                        [0, 0, 2, 0, 2, 0, 0], 
                        [0, 0, 2, 0, 0, 0, 0], 
                        [0, 0, 0, 0, 2, 0, 0], 
                        [0, 4, 0, 0, 0, 4, 0], 
                        [0, 0, 0, 0, 0, 0, 0]], 
                        "output": 
                      [[4, 0, 4], 
                       [4, 0, 0], 
                       [0, 0, 4]]
                        }, ], 
                        "test": [{"input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 
                            "output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                       [0, 2, 0, 0, 0, 0, 2, 2, 0, 0], 
                                       [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], 
                                       [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], 
                                       [0, 0, 0, 2, 2, 2, 0, 0, 0, 0], 
                                       [0, 0, 0, 0, 0, 2, 0, 0, 2, 0], 
                                       [0, 0, 0, 0, 0, 0, 0, 0, 2, 0], 
                                       [0, 0, 0, 0, 2, 2, 0, 0, 0, 0]]}]}



Finder(test_3de23699['train'], test_3de23699['test'])
#Finder(data['train'], data['test'])

# input_example2 = [
#     [0, 2, 0, 0, 0, 0, 0],
#     [2, 2, 2, 0, 0, 0, 0],
#     [0, 2, 2, 0, 0, 2, 0],
#     [0, 0, 0, 0, 2, 2, 2],
#     [0, 0, 0, 0, 0, 2, 0],
#     [0, 1, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0],
# ]
# g = Graph(input_example2)
# g.ShowGraph()